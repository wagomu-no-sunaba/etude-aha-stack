---
import fs from "node:fs";
import { todoFile } from "../../const";
import { z } from "astro:content";
export const partial = true;

const TODO = z.object({
  id: z.number(),
  title: z.string(),
  complete: z.boolean(),
});
type TODO = z.infer<typeof TODO>;
let todos: TODO[] = [];
try {
  todos = JSON.parse(fs.readFileSync(todoFile, "utf-8").trim() || "[]");
  todos.forEach((todo: TODO) => {
    TODO.parse(todo);
  });
  const requestMethod = Astro.request.method;
  if (requestMethod === "POST") {
    // 作成
    const formData = await Astro.request.formData();
    for(const [key, value] of formData.entries()) {
      console.log(key, value);
    }
    const todo = formData.get("todo") || "";
    console.log(todo);
    todos.push({
      id: todos.length + 1,
      title: todo,
      complete: false,
    });
    fs.writeFileSync(todoFile, JSON.stringify(todos));
  } else if (requestMethod === "PUT") {
    // 更新
    const url = new URL(Astro.request.url);
    const params = new URLSearchParams(url.search);
    const id = params.get("id") || "";
    const complete = params.get("complete") || "";
    const title = params.get("title") || "";
    const todo = todos.find((todo) => todo.id === Number(id));
    if (todo) {
      todo.complete = complete === "true";
      todo.title = title;
    }
    fs.writeFileSync(todoFile, JSON.stringify(todos));
  } else if (requestMethod === "DELETE") {
    // 削除
    const url = new URL(Astro.request.url);
    const params = new URLSearchParams(url.search);
    const id = params.get("id") || "";
    todos = todos.filter((todo) => todo.id !== Number(id));
    fs.writeFileSync(todoFile, JSON.stringify(todos));
  }
} catch (error) {
  console.error(error);
}
---

{
  todos.length ? (
    <ul>
      {todos.map((todo) => (
        <li id="todo_${todo.id}" x-data="{ editing: false }">
          <div class="flex px-3 pb-3 pt-2 shadow-md">
            <input
              type="checkbox"
              :checked="todo.complete"
              @change=`fetch('/api/todo?id={todo.id}&complete={!todo.complete}&title={todo.title}, { method: 'PUT' })`
              hx-swap="innerHTML"
              hx-target="#todo-list"
            />
            <template x-if="!editing">
              <div class="mx-1" x-on:dblclick="editing = true">{todo.title}</div>
            </template>
            <template x-if="editing">
              <input
                type="text"
                class="mx-1"
                value={todo.title}
                x-on:dblclick="editing = false"
                @keydown.enter="editing = false;fetch('/api/todo?id=${todo.id}&complete=${!todo.complete}&title=${todo.title}', { method: 'PUT' })"
              />
            </template>
            <button 
              class="rounded bg-blue-500 px-4 py-0 font-bold text-white hover:bg-blue-700"
              x-show="editing"
              @click="editing = false;"
              @change="fetch('/api/todo?id=${todo.id}&complete=${!todo.complete}&title=${todo.title}', { method: 'PUT' })"
            >
              変更
            </button>
          </div>
        </li>

      ))}
    </ul>
  ) : (
    <div class="flex justify-center items-center h-screen">
      <div class="text-2xl">TODOがありません</div>
    </div>
  )
}
